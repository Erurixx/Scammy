@model IEnumerable<Scammy.Models.Article>

@{
    ViewBag.Title = "View/Manage Articles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles {
    <link rel="stylesheet" href="~/assets/css/viewPublishedArticles.css" />
}


<!-- Main Content -->
<div class="az-dashboard-nav" style="margin-top: 8rem; margin-bottom: -7rem;">
    <nav class="nav">
        <a class="nav-link" href="@Url.Action("dashboard", "Analyst")">Overview</a>



        @{
            var viewPublishedActive = ViewBag.ActivePage == "viewPublishedArticles" ? "active" : "";
        }
        <a class="nav-link @viewPublishedActive" href="@Url.Action("viewPublishedArticles", "Analyst")">View/Manage Articles</a>
        <a class="nav-link" href="@Url.Action("createArticle", "Analyst")">
            Create New Article +
        </a>
    </nav>
</div>

<div class="main-container">
    <!-- Header Section -->
    <div class="header-section">
        <div class="header-info">
            <h1>Manage Articles</h1>
            <p>Browse all articles available</p>
        </div>
        <div class="header-actions">
            <div class="search-filter-container">
                <div class="search-box">
                    <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"></circle>
                        <path d="m21 21-4.35-4.35"></path>
                    </svg>
                    <input type="text" id="searchInput" placeholder="Search articles..." class="search-input">
                </div>
                <select id="categoryFilter" class="filter-select">
                    <option value="">All Categories</option>

                    
                    <option value="AI Voice Cloning Scams">AI Voice Cloning Scams</option>
                    <option value="Deepfake Video Scams">Deepfake Video Scams</option>
                    <option value="AI-Generated Phishing">AI-Generated Phishing</option>

                    
                    <option value="Imposter Scams">Imposter Scams</option>
                    <option value="Investment/Crypto Scams">Investment/Crypto Scams</option>
                    <option value="Romance Scams (Pig Butchering)">Romance Scams (Pig Butchering)</option>
                    <option value="Business Email Compromise">Business Email Compromise</option>

                    
                    <option value="Social Media Scams">Social Media Scams</option>
                    <option value="Email Phishing">Email Phishing</option>
                    <option value="SMS/Text Scams">SMS/Text Scams</option>
                    <option value="Task/Work-From-Home Scams">Task/Work-From-Home Scams</option>
                    <option value="Online Shopping Scams">Online Shopping Scams</option>
                    <option value="Fake Tech Support">Fake Tech Support</option>

                    
                    <option value="Bank Transfer Frauds">Bank Transfer Frauds</option>
                    <option value="Payment App Scams">Payment App Scams</option>
                    <option value="Credit Card Scams">Credit Card Scams</option>
                    <option value="Loan/Debt Relief Scams">Loan/Debt Relief Scams</option>

                   
                    <option value="Phone/Robocall Scams">Phone/Robocall Scams</option>
                    <option value="Government Impersonation">Government Impersonation</option>
                    <option value="Healthcare/Medicare Scams">Healthcare/Medicare Scams</option>
                    <option value="Charity Scams">Charity Scams</option>

                    
                    <option value="Identity Theft">Identity Theft</option>
                    <option value="Account Takeover">Account Takeover</option>
                    <option value="Synthetic Identity Fraud">Synthetic Identity Fraud</option>

                   
                    <option value="Real Estate Wire Fraud">Real Estate Wire Fraud</option>
                    <option value="Utility Scams">Utility Scams</option>
                    <option value="Travel/Vacation Scams">Travel/Vacation Scams</option>
                    <option value="Elder Fraud">Elder Fraud</option>

                    
                    <option value="General Awareness">General Awareness</option>
                    <option value="Emerging Threats">Emerging Threats</option>
                    <option value="Others">Others</option>
                </select>

                <select id="statusFilter" class="filter-select">
                    <option value="">All Status</option>
                    <option value="draft">Draft</option>
                    <option value="pending">Pending</option>
                    <option value="published">Published</option>
                    <option value="declined">Declined</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-icon published">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14,2 14,8 20,8"></polyline>
                    <line x1="16" y1="13" x2="8" y2="13"></line>
                    <line x1="16" y1="17" x2="8" y2="17"></line>
                </svg>
            </div>
            <div class="stat-content">
               

                <div class="stat-number" id="publishedCount">@ViewBag.PublishedArticles?.Count</div>
                <div class="stat-label">Published Articles</div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon pending">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10"></circle>
                    <polyline points="12 6 12 12 16 14"></polyline>
                </svg>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="pendingCount">@ViewBag.PendingArticles?.Count</div>
                <div class="stat-label">Pending Articles</div>
            </div>
        </div>

        @* Draft *@
        <div class="stat-card">
            <div class="stat-icon draft">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7 10 12 15 17 10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="draftCount">@ViewBag.DraftArticles?.Count</div>
                <div class="stat-label">Draft Articles</div>
            </div>
        </div>

        
        
        <div class="stat-card">
            <div class="stat-icon declined">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="3" width="7" height="7"></rect>
                    <rect x="14" y="3" width="7" height="7"></rect>
                    <rect x="14" y="14" width="7" height="7"></rect>
                    <rect x="3" y="14" width="7" height="7"></rect>
                </svg>
            </div>
            

            <div class="stat-content">
                <div class="stat-number" id="declinedCount">
                    @(Model?.Where(a => a.Status.ToLower() == "declined").Count() ?? 0)
                </div>
                <div class="stat-label">Declined Articles</div>
            </div>
        </div>
    </div>

    <!-- Articles Grid -->
    <div class="articles-section">
        <div class="section-header">
            <h2>All Articles</h2>
            <div class="view-toggle">
                <button class="view-btn active" data-view="grid">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="7" height="7"></rect>
                        <rect x="14" y="3" width="7" height="7"></rect>
                        <rect x="14" y="14" width="7" height="7"></rect>
                        <rect x="3" y="14" width="7" height="7"></rect>
                    </svg>
                </button>
                <button class="view-btn" data-view="list">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="8" y1="6" x2="21" y2="6"></line>
                        <line x1="8" y1="12" x2="21" y2="12"></line>
                        <line x1="8" y1="18" x2="21" y2="18"></line>
                        <line x1="3" y1="6" x2="3.01" y2="6"></line>
                        <line x1="3" y1="12" x2="3.01" y2="12"></line>
                        <line x1="3" y1="18" x2="3.01" y2="18"></line>
                    </svg>
                </button>
            </div>
        </div>

        <div class="articles-container" id="articlesContainer">
            @if (Model != null && Model.Any())
            {
                @foreach (var article in Model.OrderByDescending(a => a.CreatedAt))
                {
                    <div class="article-card" data-category="@article.Category" data-title="@article.Title.ToLower()" data-excerpt="@article.Excerpt?.ToLower()" data-status="@article.Status.ToLower()">
                        <div class="article-image">
                            @if (!string.IsNullOrEmpty(article.ImagePath))
                            {
                                <img src="@article.ImagePath" alt="@article.Title" />
                            }
                            else
                            {
                                <div class="image-placeholder">
                                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                                        <circle cx="8.5" cy="8.5" r="1.5"></circle>
                                        <polyline points="21,15 16,10 5,21"></polyline>
                                    </svg>
                                </div>
                            }
                        </div>
                        <div class="article-content">
                            <div class="article-meta">
                                <span class="category-tag">@article.Category</span>
                                <span class="status-tag @article.Status.ToLower()">@article.Status</span>
                                <span class="date">@article.CreatedAt.ToString("MMM dd, yyyy")</span>
                            </div>
                            <h3 class="article-title">@article.Title</h3>
                            <p class="article-excerpt">@article.Excerpt</p>
                            <div class="article-footer">
                                <div class="author-info">
                                    <span class="author">By @article.Author</span>
                                    @if (!string.IsNullOrEmpty(article.Tags) && article.Tags != "none")
                                    {
                                        <div class="tags">
                                            @foreach (var tag in article.Tags.Split(',').Take(2))
                                            {
                                                <span class="tag">#@tag.Trim()</span>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="article-actions">
                                    
                                    <button class="action-btn preview" onclick="previewArticle('@article.Title', '@Html.Raw(article.Content?.Replace("'", "\\'").Replace("\n", "\\n").Replace("\r", ""))', '@article.Category', '@article.Author', '@article.CreatedAt.ToString("MMM dd, yyyy")', '@Html.Raw((article.AdminComment ?? "").Replace("'", "\\'").Replace("\n", "\\n").Replace("\r", ""))')">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                            <circle cx="12" cy="12" r="3"></circle>
                                        </svg>
                                        Preview
                                    </button>

                                    <!-- Edit Button -->
                                    <a class="action-btn preview" href="@Url.Action("EditArticle", "Analyst", new { id = article.Id })">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M12 20h9"></path>
                                            <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4 12.5-12.5z"></path>
                                        </svg>
                                        Edit
                                    </a>

                                    
                                    <!-- Delete Button -->
                                    <form method="post" asp-action="DeleteArticle" asp-controller="Analyst" style="display:inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@article.Id" />
                                        <button type="submit" class="action-btn preview" onclick="return confirm('Are you sure you want to delete this article?')">
                                            Delete
                                        </button>
                                    </form>


                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-icon">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <polyline points="14,2 14,8 20,8"></polyline>
                        </svg>
                    </div>
                    <h3>No Published Articles</h3>
                    <p>There are no published articles to display yet.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Article Preview Modal -->
<div id="previewModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="previewTitle">Article Preview</h3>
            <button class="close-btn" onclick="closeModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div class="preview-meta">
                <span id="previewCategory" class="category-tag"></span>
                
            </div>
            <div id="previewContent" class="preview-content"></div>

            <div id="previewAdminSection" class="preview-admin-section">
                <strong>Admin Comment:</strong>
                <div id="previewAdminComment" class="preview-admin-comment"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/js/viewPublishedArticles.js"></script>

    <!-- Quick header fix -->
    <script>
        $(document).ready(function() {
            let lastScrollTop = 0;
            let headerFixed = false;

            
            function resetHeader() {
               
                $('.header-area, .background-header').removeAttr('style');
                $('.header-area .main-nav').removeAttr('style');
                $('.header-area .main-nav .nav').removeAttr('style');
                $('.header-area .main-nav .nav li').removeAttr('style');
                $('.dropdown-menu, .submenu ul, .dropdown, .submenu').removeAttr('style');

                
            
            }

            // Scroll handler
            $(window).scroll(function() {
                let scrollTop = $(this).scrollTop();

                // Reset header when scrolling back to top
                if (scrollTop < 200 && !headerFixed) {
                    resetHeader();
                } else if (scrollTop > 200) {
                    headerFixed = false;
                }

                lastScrollTop = scrollTop;
            });

            // Also reset header on page load
            resetHeader();

            // Reset header after any clicks on the page
            $(document).on('click', function() {
                if (!headerFixed) {
                    setTimeout(resetHeader, 100);
                }
            });

            // Force header reset every 5 seconds (emergency backup)
            setInterval(function() {
                if ($(window).scrollTop() < 200) {
                    resetHeader();
                }
            }, 5000);
        });
    </script>
}